syntax = "proto3";
package secure_service;
message snake_segment_t {
 int32 row =1;
 int32 col =2;
}

message snake_t {
enum direction_t {
LEFT = 0;
RIGHT = 1;
UP = 2;
DOWN = 3;
LEFT_TURN = 4;
RIGHT_TURN = 5;
QUIT = 6;
NUM_KEYS = 7;
}
 uint32 speed =1;
 direction_t dir =2;
 int32 len =3;
repeated snake_segment_t body =4;
}

message charArray {
repeated int32 element =1;
}

message screen_t {
 int32 level =1;
 int32 score =2;
 int32 high_score =3;
 int32 gold =4;
 int32 obstacles =5;
repeated charArray grid =6;
}

message eat_gold_INPUT {
 snake_t snake =1;
 screen_t screen =2;
}

message setup_level_INPUT {
 screen_t screen =1;
 snake_t snake =2;
 int32 level =3;
}

message collide_self_INPUT {
 snake_t snake =1;
}

message move_INPUT {
 snake_t snake =1;
repeated int32 keys =2;
 int32 key =3;
}

message show_score_INPUT {
 screen_t screen =1;
}

message collide_walls_INPUT {
 snake_t snake =1;
}

message collision_INPUT {
 snake_t snake =1;
 screen_t screen =2;
}

message collide_object_INPUT {
 snake_t snake =1;
 screen_t screen =2;
 int32 object =3;
}

message eat_gold_OUT {
 snake_t snake =1;
 screen_t screen =2;
 int32 returnVal =2;
}

message setup_level_OUT {
 screen_t screen =1;
 snake_t snake =2;
 int32 level =3;
}

message collide_self_OUT {
 snake_t snake =1;
 int32 returnVal =1;
}

message move_OUT {
 snake_t snake =1;
repeated int32 keys =2;
 int32 key =3;
}

message show_score_OUT {
 screen_t screen =1;
}

message collide_walls_OUT {
 snake_t snake =1;
 int32 returnVal =1;
}

message collision_OUT {
 snake_t snake =1;
 screen_t screen =2;
 int32 returnVal =2;
}

message collide_object_OUT {
 snake_t snake =1;
 screen_t screen =2;
 int32 object =3;
 int32 returnVal =3;
}

service secure_service {
rpc eat_gold( eat_gold_INPUT)  returns (eat_gold_OUT) {}
rpc setup_level( setup_level_INPUT)  returns (setup_level_OUT) {}
rpc collide_self( collide_self_INPUT)  returns (collide_self_OUT) {}
rpc move( move_INPUT)  returns (move_OUT) {}
rpc show_score( show_score_INPUT)  returns (show_score_OUT) {}
rpc collide_walls( collide_walls_INPUT)  returns (collide_walls_OUT) {}
rpc collision( collision_INPUT)  returns (collision_OUT) {}
rpc collide_object( collide_object_INPUT)  returns (collide_object_OUT) {}
}
