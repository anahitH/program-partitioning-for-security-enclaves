import os
import sys, subprocess
import argparse
from shutil import copyfile

ENCLAVE = "<ENCLAVE>" #to be changed to enclave name
ENCLAVE_SRC = "<ENCLAVE_SRC>" #to be changed to the src file implementing enclave ecalls and ocallhandkers
ENCLAVE_LIB = "<ENCLAVE_LIB>" #to be changed to the enclave library file generated by the tool
ENCLAVE_HDR = "<ENCLAVE_HEADERS>" #headers to enclave
APP = "<APP>" #to be changed to app driver name
APP_SRC = "<APP_SRC>" #app_driver src implementing ecall handlers and ocalls
APP_LIB = "<APP_LIB>" #app lib generated by the tool
APP_HDR = "<APP_HEADERS>" #app headers
ENCLAVES = "<ENCLAVES>" #enclave name (e.g. program's name)

def patchBuildFile(results):
   build_file_name = "BUILD"
   content = ""
   with open(results.build_template, 'r') as build_template:
       content = build_template.read()
       content = content.replace(ENCLAVE, results.enclave_so)
       content = content.replace(ENCLAVE_SRC, results.enclave_src)
       content = content.replace(ENCLAVE_LIB, results.enclave_lib)
       enclave_headers = ",".join(results.enclave_hdr)
       content = content.replace(ENCLAVE_HDR, enclave_headers)
       content = content.replace(APP, results.app)
       content = content.replace(APP_SRC, results.app_src)
       content = content.replace(APP_LIB, results.app_lib)
       app_headers = ",".join(results.app_hdr)
       content = content.replace(APP_HDR, app_headers)
       content = content.replace(ENCLAVES, results.enclaves)
   with open(build_file_name, 'w+') as build_file:
       build_file.write(content)
       build_file.close()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-enclave', action='store', dest='enclave_so', help="The name of enclave shared library to be generated.", required=True)
    parser.add_argument('-enclave_src', action='store', dest='enclave_src', help="Source file implementing enclave.", required=True)
    parser.add_argument('-enclave_lib', action='store', dest='enclave_lib', help="Enclave partition library.", required=True)
    parser.add_argument('-enclave_hdr', action='store', dest='enclave_hdr', nargs='+', help="Enclave headers", default=[])
    parser.add_argument('-app', action='store', dest='app', help="The name of app driver file.", required=True)
    parser.add_argument('-app_src', action='store', dest='app_src', help="Source file implementing application driver.", required=True)
    parser.add_argument('-app_lib', action='store', dest='app_lib', help="Application partition library.", required=True)
    parser.add_argument('-app_hdr', action='store', dest='app_hdr', nargs='+', help="Application headers.", default=[])
    parser.add_argument('-enclaves', action='store', dest='enclaves', help="Enclaves", required=True)
    parser.add_argument('-build_template', action='store', dest='build_template', help="Bazel BUILD file template.", required=True)
    results = parser.parse_args()
    patchBuildFile(results)

if __name__ == "__main__":
    main()
