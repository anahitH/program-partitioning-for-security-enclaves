import os
import sys, subprocess
import argparse
from shutil import copyfile

PROGRAM = "<PROGRAM>" #to be changed to program name
ENCLAVE_LIB = "<ENCLAVE_LIB>" #to be changed to the enclave library file generated by the tool
UNPROTECTED_LIB = "<UNPROTECTED_LIB>" #to be changed to the unprotected library file generated by the tool
EDL = "<EDL>" #to be changed to the edl file name

def patchMakeFile(results, template_makefile):
    makefile_name = template_makefile + '_patched'
    content = ""
    with open(template_makefile, 'r') as makefile_template:
       content = makefile_template.read()
       content = content.replace(PROGRAM, results.program_name)
       content = content.replace(EDL, results.edl)
       content = content.replace(ENCLAVE_LIB, results.enclave_lib)
       content = content.replace(UNPROTECTED_LIB, results.unprotected_lib)
    with open(makefile_name, 'w+') as makefile:
       makefile.write(content)
       makefile.close()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-makefile', action='store', dest='makefile_template', help="The name of the Makefile template.", required=True)
    parser.add_argument('-enclave-makefile', action='store', dest='enclave_makefile_template', help="The name of the enclave Makefile template.", required=True)
    parser.add_argument('-host-makefile', action='store', dest='host_makefile_template', help="The name of the host Makefile template.", required=True)
    parser.add_argument('-program', action='store', dest='program_name', help="The name of the program to protect.", required=True)
    parser.add_argument('-enclave_lib', action='store', dest='enclave_lib', help="The name of enclave lib generated by the partitioner.", required=True)
    parser.add_argument('-unprotected_lib', action='store', dest='unprotected_lib', help="The name of unprotected lib generated by the partitioner.", required=True)
    parser.add_argument('-edl', action='store', dest='edl', help="The name of edl file containing enclave definition.", required=True)
    results = parser.parse_args()
    patchMakeFile(results, results.makefile_template);
    patchMakeFile(results, results.enclave_makefile_template);
    patchMakeFile(results, results.host_makefile_template);

if __name__ == "__main__":
    main()
